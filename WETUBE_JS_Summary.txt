###### WETUBE JS SUMMARY ######


1. #### Node JS ####
== 브라우저 바깥에서 쓸 수 있는 자바스크립트

2. #### NPM ####
== 자바스크립트 언어를 위한 패키지 매니저
== Node JS와 상호작용을 할 수 있게 해줌
== 

3. #### Express - NPM ####
== npm install(i) express -> node_modules파일 + package-lock.json 파일 생성
                          -> 기존 package.json파일 dependencies express 생성됨
                          -> npm i 실행 시 dependencies에 해당되는 모듈들을 다 설치해줌
                          -> .gitignore -> /node_modules -> 다른사람들에게 node_modules 파일을 보내지 않아도 됨. package.json파일만 있어도 됨
                          -> dependencies에 express 있을 시 이후 npm i 만 실행해도 됨
                          -> package-lock.json -> 패키지들을 안전하게 관리함

== npm init -> 새 npm패키지 또는 기존 npm 패키지를 설정 할 수 있음 
            -> package.json 만드는 걸 도와줌
== node_modules -> npm으로 설치한 모든 패키지가 저장됨

4. #### Package.json ####
== json -> 그냥 텍스트 파일임. 파일에 정보를 저장하기 위해 만든 방식 중 하나
== npm 활용 -> npm init을 통해 package.json 생성
== node.js 관련 정보를 담는 방법으로 일반적인 Text이므로 무엇을 넣어도 상관없음

== script 엔트리를 생성하고 그 안에 script를 입력하면 --> npm run (script이름) 을 사용할 수 있음
(ex)ppopopp
"scripts": {
    "win": "node index.js" --> npm run win 실행 시 index.js파일 실행됨
}

"scripts": {
    "dev" : "nodemon -- exec babel-node src/server.js" --> npm run dev 사용 가능
}

5. #### Babeljs.io - JS compiler ####
== 작성한 최신 자바스크립트를 nodeJS가 이해할 수 있는 자바스크립트로 바꿔주는 것
== dependencies: 프로젝트가 작동하기 위해 필요한 것들
== devDependencies: 개발자가 개발할 때 필요한 것들 
(ex) -- nodemon, babel-node
1. nodemon(파일을 보고 있다가 변화가 있으면 commend를 재시작 시켜줌) 서버를 만드는 데 필수적인 요소는 아니지만 개발환경을 편하게 해줌
2. nodemon -> babel-node를 실행 -> src 폴더에 가서 server.js 실행

NodeJS에서 필요한 babel설치
npm install --save-dev @babel/core
npm install @babel/preset-env --save-dev

babel.config.json파일 생성
```
{
"presets": ["@babel/preset-env"]
}
```
https://babeljs.io/setup#installation

@babel/preset-env
@babel/preset-env는 환경에 필요한 구문 변환을 세부적으로 관리할 필요 없이 최신 JavaScript를 사용할 수 있게 해주는 스마트한 preset입니다

3. #### Nodemon ####
== npm i nodemon -- save-dev 6:05
== node index.js(nodeJS로 실행) -> babel-node index.js() -> nodemon --exec babel-node index.js
== ex) "scripts": { nodemon --exec babel-node index.js" }
== 만든 파일이 수정되는 걸 감시해주는 패키지 -> 파일이 수정되면 알아서 재시작해줌 
                                          -> npm run 을 계속 실행해주지 않아도 됨


3. #### Server ####
== 항상 켜져있고 인터넷에 연결 돼 있으면서 request를 listening하고 있는 컴퓨터 
== 브라우저는 서버에게 홈페이지를 요구하고, 브라우저가 요청한 걸 서버는 응답해줘야 함 --> 응답이 없을 시 무한 로딩
(ex)
const app = express();
app.get("/", handleHome) -> get(route, handler) ----> 서버에게 홈페이지를 request 후 handler 응답

4. #### Middleware ####
== 말 그대로 중간에 있는 software - request와 response의 중간 
== request 오브젝트와, response 오브젝트 말고도 next 파라미터를 가지고 있음
== next 파라미터는 다음으로 request 를 처리할 콜백함수를 담고있음
== 원하는 만큼 사용가능하며 누군가가 응답하기 전까지 request와 관련된 모든 controller는 모두 Middleware이다

5. #### Router && Controllers ####
(ex)
const videoRouter = express.Router();
const handleWatchVideo = (req,res) => res.send("Watch Video");
videoRouter.get("/watch",handleWatchVideo);

app.use("/videos", videoRouter); 
-> 누군가가 "/videos"로 시작하는 url에 접근하면
-> express는 videoRouter로 들어가고
-> videoRouter는 가지고 있는 url로 들어감으로써 handleWatchVideo 실행

-> Router와 Controller를 같이 쓰는 건 권장하지 않음
-> 따로 작성한 뒤 export && import 실행
-> export default는 내보내는 게 1개 밖에 없기에 변수명을 바꿔줘도 되지만
    export는 내보내는 게 여러가지라 선언된 변수명 그대로 써줘야 함

6. #### URL Parameters ####
(ex)
videoRouter.get("/:변수몀/edit", edit);
-> URL 안에 변수를 넣어줌
-> req.params.변수명

7. #### Rendering ####
-> pug를 렌더링해주는건 controller!
-> render는 2개의 argument를 받는다
-> 하나는 view, 다른 하나는 템플릿에 보낼 변수!
-> 템플릿에 변수를 생성하는법 #{}




