###### WETUBE JS SUMMARY ######

1. #### Package.json ####
== node.js 관련 정보를 담는 방법으로 일반적인 Text이므로 무엇을 넣어도 상관없음

== script 엔트리를 생성하고 그 안에 script를 입력하면 --> npm run (script이름) 을 사용할 수 있음
(ex)
"scripts": {
    "dev" : "nodemon -- exec babel-node src/server.js" --> npm run dev 사용 가능
}

2. #### Dependencies ####
== dependencies: 프로젝트가 돌아가기 위해 필요한 package
== package.json 파일이 있다면 npm i 를 실행시 npm에서 dependencies와 devDependencies를 찾아 있는 모든 걸 설치해줌
== package.json에 있는 dependencies들에 내용만 추가해주면 npm이 알아서 설치해주므로 node_modules를 공유할 필요없음

-> dependencies와 devDependencies의 차이점
== dependencies: 프로젝트가 작동하기 위해 필요한 것들
== devDependencies: 개발자가 개발할 때 필요한 것들 
(ex) -- nodemon, babel-node
1. nodemon(파일을 보고 있다가 변화가 있으면 commend를 재시작 시켜줌) 서버를 만드는 데 필수적인 요소는 아니지만 개발환경을 편하게 해줌
2. nodemon -> babel-node를 실행 -> src 폴더에 가서 server.js 실행

3. #### Server ####
== 항상 켜져있고 인터넷에 연결 돼 있으면서 request를 listening하고 있는 컴퓨터 
== 브라우저는 서버에게 홈페이지를 요구하고, 브라우저가 요청한 걸 서버는 응답해줘야 함 --> 응답이 없을 시 무한 로딩
(ex)
const app = express();
app.get("/", handleHome) -> get(route, handler) ----> 서버에게 홈페이지를 request 후 handler 응답

4. #### Middleware ####
== 말 그대로 중간에 있는 software - request와 response의 중간 
== request 오브젝트와, response 오브젝트 말고도 next 파라미터를 가지고 있음
== next 파라미터는 다음으로 request 를 처리할 콜백함수를 담고있음
== 원하는 만큼 사용가능하며 누군가가 응답하기 전까지 request와 관련된 모든 controller는 모두 Middleware이다

5. #### Router ####
(ex)
const videoRouter = express.Router();
const handleWatchVideo = (req,res) => res.send("Watch Video");
videoRouter.get("/watch",handleWatchVideo);

app.use("/videos", videoRouter); 
-> 누군가가 "/videos"로 시작하는 url에 접근하면
-> express는 videoRouter로 들어가고
-> videoRouter는 가지고 있는 url로 들어감으로써 handleWatchVideo 실행



